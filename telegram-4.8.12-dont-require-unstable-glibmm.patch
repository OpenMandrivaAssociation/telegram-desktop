diff -up tdesktop-4.9.5-full/Telegram/SourceFiles/platform/linux/integration_linux.cpp.4~ tdesktop-4.9.5-full/Telegram/SourceFiles/platform/linux/integration_linux.cpp
--- tdesktop-4.9.5-full/Telegram/SourceFiles/platform/linux/integration_linux.cpp.4~	2023-09-05 11:10:03.000000000 +0200
+++ tdesktop-4.9.5-full/Telegram/SourceFiles/platform/linux/integration_linux.cpp	2023-09-05 22:25:10.711371906 +0200
@@ -9,6 +9,7 @@ https://github.com/telegramdesktop/tdesk
 
 #include "platform/platform_integration.h"
 #include "base/platform/base_platform_info.h"
+#include "base/platform/linux/base_linux_glibmm_helper.h"
 #include "base/platform/linux/base_linux_xdp_utilities.h"
 #include "core/sandbox.h"
 #include "core/application.h"
@@ -109,7 +110,7 @@ Application::Application()
 	const auto notificationIdVariantType = [] {
 		try {
 			return gi::wrap(
-				Glib::create_variant(
+				base::Platform::MakeGlibVariant(
 					NotificationId().toTuple()
 				).get_type().gobj_copy(),
 				gi::transfer_full,
@@ -132,9 +133,7 @@ Application::Application()
 				const auto &app = Core::App();
 				app.notifications().manager().notificationActivated(
 					NotificationId::FromTuple(
-						Glib::wrap(
-							parameter.gobj_copy_()
-						).get_dynamic<NotificationIdTuple>()
+						base::Platform::GlibVariantCast<NotificationIdTuple>(Glib::wrap(parameter.gobj_copy_()))
 					)
 				);
 			} catch (...) {
@@ -156,12 +155,9 @@ Application::Application()
 				const auto &app = Core::App();
 				app.notifications().manager().notificationReplied(
 					NotificationId::FromTuple(
-						Glib::wrap(
-							parameter.gobj_copy_()
-						).get_dynamic<NotificationIdTuple>()
+						base::Platform::GlibVariantCast<NotificationIdTuple>(Glib::wrap(parameter.gobj_copy_()))
 					),
-					{}
-				);
+					{});
 			} catch (...) {
 			}
 		});
@@ -219,7 +215,7 @@ LinuxIntegration::LinuxIntegration()
 		Core::Sandbox::Instance().customEnterFromEventLoop([&] {
 			try {
 				Core::App().settings().setSystemDarkMode(
-					value.get_dynamic<uint>() == 1);
+					base::Platform::GlibVariantCast<uint>(value) == 1);
 			} catch (...) {
 			}
 		});
diff -up tdesktop-4.9.5-full/Telegram/SourceFiles/platform/linux/linux_xdp_open_with_dialog.cpp.4~ tdesktop-4.9.5-full/Telegram/SourceFiles/platform/linux/linux_xdp_open_with_dialog.cpp
--- tdesktop-4.9.5-full/Telegram/SourceFiles/platform/linux/linux_xdp_open_with_dialog.cpp.4~	2023-09-05 11:10:03.000000000 +0200
+++ tdesktop-4.9.5-full/Telegram/SourceFiles/platform/linux/linux_xdp_open_with_dialog.cpp	2023-09-05 22:11:15.002750670 +0200
@@ -8,6 +8,7 @@ https://github.com/telegramdesktop/tdesk
 #include "platform/linux/linux_xdp_open_with_dialog.h"
 
 #include "base/platform/base_platform_info.h"
+#include "base/platform/linux/base_linux_glibmm_helper.h"
 #include "base/platform/linux/base_linux_xdp_utilities.h"
 #include "base/platform/linux/base_linux_wayland_integration.h"
 #include "base/random.h"
@@ -31,16 +32,19 @@ bool ShowXDPOpenWithDialog(const QString
 		const auto connection = Gio::DBus::Connection::get_sync(
 			Gio::DBus::BusType::SESSION);
 
-		const auto version = connection->call_sync(
+		auto reply = connection->call_sync(
 			base::Platform::XDP::kObjectPath,
 			kPropertiesInterface,
 			"Get",
-			Glib::create_variant(std::tuple{
+			base::Platform::MakeGlibVariant(std::tuple{
 				Glib::ustring(kXDPOpenURIInterface),
 				Glib::ustring("version"),
 			}),
 			base::Platform::XDP::kService
-		).get_child(0).get_dynamic<Glib::Variant<uint>>().get();
+		);
+		const auto version = base::Platform::GlibVariantCast<uint>(
+			base::Platform::GlibVariantCast<Glib::VariantBase>(
+				reply.get_child(0)));
 
 		if (version < 3) {
 			return false;
@@ -92,7 +96,7 @@ bool ShowXDPOpenWithDialog(const QString
 				loop->quit();
 			},
 			base::Platform::XDP::kService,
-			base::Platform::XDP::kRequestInterface,
+			"org.freedesktop.portal.Request",
 			"Response",
 			requestPath);
 
@@ -108,23 +112,27 @@ bool ShowXDPOpenWithDialog(const QString
 			base::Platform::XDP::kObjectPath,
 			kXDPOpenURIInterface,
 			"OpenFile",
-			Glib::create_variant(std::tuple{
-				base::Platform::XDP::ParentWindowID(),
-				Glib::DBusHandle(),
-				std::map<Glib::ustring, Glib::VariantBase>{
+
+			Glib::VariantContainerBase::create_tuple({
+				Glib::Variant<Glib::ustring>::create(base::Platform::XDP::ParentWindowID()),
+				Glib::Variant<int>::create_handle(0),
+				Glib::Variant<std::map<
+					Glib::ustring,
+					Glib::VariantBase
+				>>::create({
 					{
 						"handle_token",
-						Glib::create_variant(handleToken)
+						Glib::Variant<Glib::ustring>::create(handleToken)
 					},
 					{
 						"activation_token",
-						Glib::create_variant(activationToken)
+						Glib::Variant<Glib::ustring>::create(activationToken)
 					},
 					{
 						"ask",
-						Glib::create_variant(true)
+						Glib::Variant<bool>::create(true)
 					},
-				},
+				}),
 			}),
 			Gio::UnixFDList::create(std::vector<int>{ fd }),
 			outFdList,
diff -up tdesktop-4.9.5-full/Telegram/SourceFiles/platform/linux/main_window_linux.cpp.4~ tdesktop-4.9.5-full/Telegram/SourceFiles/platform/linux/main_window_linux.cpp
--- tdesktop-4.9.5-full/Telegram/SourceFiles/platform/linux/main_window_linux.cpp.4~	2023-09-05 11:10:03.000000000 +0200
+++ tdesktop-4.9.5-full/Telegram/SourceFiles/platform/linux/main_window_linux.cpp	2023-09-05 22:11:15.002750670 +0200
@@ -26,6 +26,7 @@ https://github.com/telegramdesktop/tdesk
 #include "window/window_controller.h"
 #include "window/window_session_controller.h"
 #include "base/platform/base_platform_info.h"
+#include "base/platform/linux/base_linux_glibmm_helper.h"
 #include "base/event_filter.h"
 #include "ui/platform/ui_platform_window_title.h"
 #include "ui/widgets/popup_menu.h"
@@ -255,11 +256,13 @@ void MainWindow::updateUnityCounter() {
 		// According to the spec, it should be of 'x' D-Bus signature,
 		// which corresponds to signed 64-bit integer
 		// https://wiki.ubuntu.com/Unity/LauncherAPI#Low_level_DBus_API:_com.canonical.Unity.LauncherEntry
-		dbusUnityProperties["count"] = Glib::create_variant(
-			int64(counterSlice));
-		dbusUnityProperties["count-visible"] = Glib::create_variant(true);
+		dbusUnityProperties["count"] = Glib::Variant<int64>::create(
+			counterSlice);
+		dbusUnityProperties["count-visible"] =
+			Glib::Variant<bool>::create(true);
 	} else {
-		dbusUnityProperties["count-visible"] = Glib::create_variant(false);
+		dbusUnityProperties["count-visible"] =
+			Glib::Variant<bool>::create(false);
 	}
 
 	try {
@@ -272,7 +275,7 @@ void MainWindow::updateUnityCounter() {
 			"com.canonical.Unity.LauncherEntry",
 			"Update",
 			{},
-			Glib::create_variant(std::tuple{
+			base::Platform::MakeGlibVariant(std::tuple{
 				launcherUrl,
 				dbusUnityProperties,
 			}));
diff -up tdesktop-4.9.5-full/Telegram/SourceFiles/platform/linux/notifications_manager_linux.cpp.4~ tdesktop-4.9.5-full/Telegram/SourceFiles/platform/linux/notifications_manager_linux.cpp
--- tdesktop-4.9.5-full/Telegram/SourceFiles/platform/linux/notifications_manager_linux.cpp.4~	2023-09-05 11:10:03.000000000 +0200
+++ tdesktop-4.9.5-full/Telegram/SourceFiles/platform/linux/notifications_manager_linux.cpp	2023-09-05 22:11:15.002750670 +0200
@@ -10,6 +10,7 @@ https://github.com/telegramdesktop/tdesk
 
 #include "base/options.h"
 #include "base/platform/base_platform_info.h"
+#include "base/platform/linux/base_linux_glibmm_helper.h"
 #include "base/platform/linux/base_linux_dbus_utilities.h"
 #include "core/application.h"
 #include "core/sandbox.h"
@@ -42,6 +43,8 @@ constexpr auto kObjectPath = "/org/freed
 constexpr auto kInterface = kService;
 constexpr auto kPropertiesInterface = "org.freedesktop.DBus.Properties";
 
+using namespace base::Platform;
+
 struct ServerInformation {
 	QString name;
 	QString vendor;
@@ -113,10 +116,10 @@ void StartServiceAsync(Fn<void()> callba
 		const auto connection = Gio::DBus::Connection::get_sync(
 			Gio::DBus::BusType::SESSION);
 
-		base::Platform::DBus::StartServiceByNameAsync(
+		DBus::StartServiceByNameAsync(
 			connection,
 			kService,
-			[=](Fn<base::Platform::DBus::StartReply()> result) {
+			[=](Fn<DBus::StartReply()> result) {
 				Noexcept([&] {
 					try {
 						result(); // get the error if any
@@ -153,7 +156,7 @@ bool GetServiceRegistered() {
 
 		const auto hasOwner = [&] {
 			try {
-				return base::Platform::DBus::NameHasOwner(
+				return DBus::NameHasOwner(
 					connection,
 					kService);
 			} catch (...) {
@@ -164,7 +167,7 @@ bool GetServiceRegistered() {
 		static const auto activatable = [&] {
 			try {
 				return ranges::contains(
-					base::Platform::DBus::ListActivatableNames(connection),
+					DBus::ListActivatableNames(connection),
 					kService,
 					&Glib::ustring::raw);
 			} catch (...) {
@@ -192,23 +195,19 @@ void GetServerInformation(
 			{},
 			[=](const Glib::RefPtr<Gio::AsyncResult> &result) {
 				Noexcept([&] {
-					const auto reply = connection->call_finish(result);
+					auto reply = connection->call_finish(result);
+
+					const auto name = GlibVariantCast<Glib::ustring>(
+						reply.get_child(0));
+
+					const auto vendor = GlibVariantCast<Glib::ustring>(
+						reply.get_child(1));
 
-					const auto name = reply.get_child(
-						0
-					).get_dynamic<Glib::ustring>();
-
-					const auto vendor = reply.get_child(
-						1
-					).get_dynamic<Glib::ustring>();
-
-					const auto version = reply.get_child(
-						2
-					).get_dynamic<Glib::ustring>();
-
-					const auto specVersion = reply.get_child(
-						3
-					).get_dynamic<Glib::ustring>();
+					const auto version = GlibVariantCast<Glib::ustring>(
+						reply.get_child(2));
+
+					const auto specVersion = GlibVariantCast<Glib::ustring>(
+						reply.get_child(3));
 
 					crl::on_main([=] {
 						callback(ServerInformation{
@@ -242,17 +241,18 @@ void GetCapabilities(Fn<void(const QStri
 			{},
 			[=](const Glib::RefPtr<Gio::AsyncResult> &result) {
 				Noexcept([&] {
+					auto reply = connection->call_finish(result);
+
 					QStringList value;
 					ranges::transform(
-						connection->call_finish(
-							result
-						).get_child(
-							0
-						).get_dynamic<std::vector<Glib::ustring>>(),
+						GlibVariantCast<std::vector<Glib::ustring>>(
+							reply.get_child(0)),
 						ranges::back_inserter(value),
 						QString::fromStdString);
 
-					crl::on_main([=] { callback(value); });
+					crl::on_main([=] {
+						callback(value);
+					});
 				}, [&] {
 					crl::on_main([=] { callback({}); });
 				});
@@ -272,20 +272,21 @@ void GetInhibited(Fn<void(bool)> callbac
 			kObjectPath,
 			kPropertiesInterface,
 			"Get",
-			Glib::create_variant(std::tuple{
+			MakeGlibVariant(std::tuple{
 				Glib::ustring(kInterface),
 				Glib::ustring("Inhibited"),
 			}),
 			[=](const Glib::RefPtr<Gio::AsyncResult> &result) {
 				Noexcept([&] {
-					const auto value = connection->call_finish(
-						result
-					).get_child(
-						0
-					).get_dynamic<Glib::Variant<bool>>(
-					).get();
-
-					crl::on_main([=] { callback(value); });
+					auto reply = connection->call_finish(result);
+ 
+					const auto value = GlibVariantCast<bool>(
+						GlibVariantCast<Glib::VariantBase>(
+							reply.get_child(0)));
+ 
+					crl::on_main([=] {
+						callback(value);
+					});
 				}, [&] {
 					crl::on_main([=] { callback(false); });
 				});
@@ -471,38 +472,38 @@ bool NotificationData::init(
 			const Glib::ustring &object_path,
 			const Glib::ustring &interface_name,
 			const Glib::ustring &signal_name,
-			const Glib::VariantContainerBase &parameters) {
+			Glib::VariantContainerBase parameters) {
 		Noexcept([&] {
 			if (signal_name == "ActionInvoked") {
-				const auto id = parameters.get_child(0).get_dynamic<uint>();
+				const auto id = GlibVariantCast<uint>(
+					parameters.get_child(0));
 
-				const auto actionName = parameters.get_child(
-					1
-				).get_dynamic<Glib::ustring>();
+				const auto actionName = GlibVariantCast<Glib::ustring>(
+					parameters.get_child(1));
 
 				crl::on_main(weak, [=] { actionInvoked(id, actionName); });
 			} else if (signal_name == "ActivationToken") {
-				const auto id = parameters.get_child(0).get_dynamic<uint>();
+				const auto id = GlibVariantCast<uint>(
+					parameters.get_child(0));
 
-				const auto token = parameters.get_child(
-					1
-				).get_dynamic<Glib::ustring>();
+				const auto token = GlibVariantCast<Glib::ustring>(
+					parameters.get_child(1));
 
 				crl::on_main(weak, [=] { activationToken(id, token); });
 			} else if (signal_name == "NotificationReplied") {
-				const auto id = parameters.get_child(0).get_dynamic<uint>();
+				const auto id = GlibVariantCast<uint>(
+					parameters.get_child(0));
 
-				const auto text = parameters.get_child(
-					1
-				).get_dynamic<Glib::ustring>();
+				const auto text = GlibVariantCast<Glib::ustring>(
+					parameters.get_child(1));
 
 				crl::on_main(weak, [=] { notificationReplied(id, text); });
 			} else if (signal_name == "NotificationClosed") {
-				const auto id = parameters.get_child(0).get_dynamic<uint>();
+				const auto id = GlibVariantCast<uint>(
+					parameters.get_child(0));
 
-				const auto reason = parameters.get_child(
-					1
-				).get_dynamic<uint>();
+				const auto reason = GlibVariantCast<uint>(
+					parameters.get_child(1));
 
 				crl::on_main(weak, [=] { notificationClosed(id, reason); });
 			}
@@ -569,30 +570,30 @@ bool NotificationData::init(
 	}
 
 	if (capabilities.contains("action-icons")) {
-		_hints["action-icons"] = Glib::create_variant(true);
+		_hints["action-icons"] = Glib::Variant<bool>::create(true);
 	}
 
 	// suppress system sound if telegram sound activated,
 	// otherwise use system sound
 	if (capabilities.contains("sound")) {
 		if (Core::App().settings().soundNotify()) {
-			_hints["suppress-sound"] = Glib::create_variant(true);
+			_hints["suppress-sound"] = Glib::Variant<bool>::create(true);
 		} else {
 			// sound name according to http://0pointer.de/public/sound-naming-spec.html
-			_hints["sound-name"] = Glib::create_variant(
-				Glib::ustring("message-new-instant"));
+			_hints["sound-name"] = Glib::Variant<Glib::ustring>::create(
+				"message-new-instant");
 		}
 	}
 
 	if (capabilities.contains("x-canonical-append")) {
-		_hints["x-canonical-append"] = Glib::create_variant(
-			Glib::ustring("true"));
+		_hints["x-canonical-append"] = Glib::Variant<Glib::ustring>::create(
+			"true");
 	}
 
-	_hints["category"] = Glib::create_variant(Glib::ustring("im.received"));
+	_hints["category"] = Glib::Variant<Glib::ustring>::create("im.received");
 
-	_hints["desktop-entry"] = Glib::create_variant(
-		Glib::ustring(QGuiApplication::desktopFileName().toStdString()));
+	_hints["desktop-entry"] = Glib::Variant<Glib::ustring>::create(
+		QGuiApplication::desktopFileName().toStdString());
 
 	_notificationClosedSignalId = _dbusConnection->signal_subscribe(
 		signalEmitted,
@@ -642,7 +643,7 @@ void NotificationData::show() {
 			kObjectPath,
 			kInterface,
 			"Notify",
-			Glib::create_variant(std::tuple{
+			MakeGlibVariant(std::tuple{
 				Glib::ustring(std::string(AppName)),
 				uint(0),
 				iconName,
@@ -654,12 +655,9 @@ void NotificationData::show() {
 			}),
 			[=](const Glib::RefPtr<Gio::AsyncResult> &result) {
 				Noexcept([&] {
-					const auto notificationId = connection->call_finish(
-						result
-					).get_child(
-						0
-					).get_dynamic<uint>();
-
+					auto reply = connection->call_finish(result);
+					const auto notificationId = GlibVariantCast<uint>(
+						reply.get_child(0));
 					crl::on_main(weak, [=] {
 						_notificationId = notificationId;
 					});
@@ -684,7 +682,7 @@ void NotificationData::close() {
 		kObjectPath,
 		kInterface,
 		"CloseNotification",
-		Glib::create_variant(std::tuple{
+		MakeGlibVariant(std::tuple{
 			_notificationId,
 		}),
 		{},
@@ -721,7 +719,7 @@ void NotificationData::setImage(const QI
 		? image.convertToFormat(QImage::Format_RGBA8888)
 		: image.convertToFormat(QImage::Format_RGB888);
 
-	_hints[_imageKey] = Glib::create_variant(std::tuple{
+	_hints[_imageKey] = MakeGlibVariant(std::tuple{
 		convertedImage.width(),
 		convertedImage.height(),
 		int(convertedImage.bytesPerLine()),
@@ -972,22 +970,20 @@ Manager::Private::Private(not_null<Manag
 					const Glib::ustring &object_path,
 					const Glib::ustring &interface_name,
 					const Glib::ustring &signal_name,
-					const Glib::VariantContainerBase &parameters) {
+					Glib::VariantContainerBase parameters) {
 				Noexcept([&] {
-					const auto interface = parameters.get_child(
-						0
-					).get_dynamic<Glib::ustring>();
+					const auto interface = GlibVariantCast<Glib::ustring>(
+						parameters.get_child(0));
 
 					if (interface != kInterface) {
 						return;
 					}
 
-					const auto inhibited = parameters.get_child(
-						1
-					).get_dynamic<std::map<Glib::ustring, Glib::VariantBase>>(
-					).at(
-						"Inhibited"
-					).get_dynamic<bool>();
+					const auto inhibited = GlibVariantCast<bool>(
+						GlibVariantCast<
+							std::map<Glib::ustring, Glib::VariantBase>
+					>(parameters.get_child(1)).at("Inhibited"));
+
 
 					crl::on_main(weak, [=] {
 						_inhibited = inhibited;
diff -up tdesktop-4.9.5-full/Telegram/SourceFiles/platform/linux/specific_linux.cpp.4~ tdesktop-4.9.5-full/Telegram/SourceFiles/platform/linux/specific_linux.cpp
--- tdesktop-4.9.5-full/Telegram/SourceFiles/platform/linux/specific_linux.cpp.4~	2023-09-05 11:10:03.000000000 +0200
+++ tdesktop-4.9.5-full/Telegram/SourceFiles/platform/linux/specific_linux.cpp	2023-09-05 22:11:15.002750670 +0200
@@ -9,6 +9,7 @@ https://github.com/telegramdesktop/tdesk
 
 #include "base/random.h"
 #include "base/platform/base_platform_info.h"
+#include "base/platform/linux/base_linux_glibmm_helper.h"
 #include "base/platform/linux/base_linux_dbus_utilities.h"
 #include "base/platform/linux/base_linux_xdp_utilities.h"
 #include "platform/linux/linux_desktop_environment.h"
@@ -75,13 +76,13 @@ bool PortalAutostart(bool start, bool si
 		commandline.push_back("-autostart");
 
 		std::map<Glib::ustring, Glib::VariantBase> options;
-		options["handle_token"] = Glib::create_variant(handleToken);
-		options["reason"] = Glib::create_variant(
-			Glib::ustring(
-				tr::lng_settings_auto_start(tr::now).toStdString()));
-		options["autostart"] = Glib::create_variant(start);
-		options["commandline"] = Glib::create_variant(commandline);
-		options["dbus-activatable"] = Glib::create_variant(false);
+		options["handle_token"] = Glib::Variant<Glib::ustring>::create(
+			handleToken);
+		options["reason"] = Glib::Variant<Glib::ustring>::create(
+			tr::lng_settings_auto_start(tr::now).toStdString());
+		options["autostart"] = Glib::Variant<bool>::create(start);
+		options["commandline"] = base::Platform::MakeGlibVariant(commandline);
+		options["dbus-activatable"] = Glib::Variant<bool>::create(false);
 
 		auto uniqueName = connection->get_unique_name();
 		uniqueName.erase(0, 1);
@@ -102,11 +103,10 @@ bool PortalAutostart(bool start, bool si
 				const Glib::ustring &object_path,
 				const Glib::ustring &interface_name,
 				const Glib::ustring &signal_name,
-				const Glib::VariantContainerBase &parameters) {
+				Glib::VariantContainerBase parameters) {
 				try {
-					const auto response = parameters.get_child(
-						0
-					).get_dynamic<uint>();
+					const auto response = base::Platform::GlibVariantCast<
+						uint>(parameters.get_child(0));
 
 					if (response) {
 						if (!silent) {
@@ -125,7 +125,7 @@ bool PortalAutostart(bool start, bool si
 				loop->quit();
 			},
 			base::Platform::XDP::kService,
-			base::Platform::XDP::kRequestInterface,
+			"org.freedesktop.portal.Request",
 			"Response",
 			requestPath);
 
@@ -139,7 +139,7 @@ bool PortalAutostart(bool start, bool si
 			base::Platform::XDP::kObjectPath,
 			"org.freedesktop.portal.Background",
 			"RequestBackground",
-			Glib::create_variant(std::tuple{
+			base::Platform::MakeGlibVariant(std::tuple{
 				base::Platform::XDP::ParentWindowID(),
 				options,
 			}),
@@ -443,7 +443,8 @@ std::optional<bool> IsDarkMode() {
 			"color-scheme");
 
 		if (result.has_value()) {
-			return result->get_dynamic<uint>() == 1;
+			const auto value = base::Platform::GlibVariantCast<uint>(*result);
+			return value == 1;
 		}
 	} catch (...) {
 	}
diff -up tdesktop-4.9.5-full/Telegram/build/docker/centos_env/Dockerfile.4~ tdesktop-4.9.5-full/Telegram/build/docker/centos_env/Dockerfile
--- tdesktop-4.9.5-full/Telegram/build/docker/centos_env/Dockerfile.4~	2023-09-05 11:10:03.000000000 +0200
+++ tdesktop-4.9.5-full/Telegram/build/docker/centos_env/Dockerfile	2023-09-05 22:11:15.002750670 +0200
@@ -703,7 +703,7 @@ RUN git clone -b xkbcommon-1.3.1 --depth
 FROM patches AS glibmm
 COPY --link --from=libffi {{ LibrariesPath }}/libffi-cache /
 
-RUN git clone -b 2.77.0 --depth=1 {{ GIT }}/GNOME/glibmm.git \
+RUN git clone -b 2.76.0 --depth=1 {{ GIT }}/GNOME/glibmm.git \
 	&& cd glibmm \
 	&& git apply ../patches/glibmm.patch \
 	&& CFLAGS="$CFLAGS {{ CFLAGS_LTO }}" CXXFLAGS="$CXXFLAGS {{ CFLAGS_LTO }}" meson build \
diff -up tdesktop-4.9.5-full/Telegram/lib_base/CMakeLists.txt.4~ tdesktop-4.9.5-full/Telegram/lib_base/CMakeLists.txt
--- tdesktop-4.9.5-full/Telegram/lib_base/CMakeLists.txt.4~	2023-08-31 20:40:42.000000000 +0200
+++ tdesktop-4.9.5-full/Telegram/lib_base/CMakeLists.txt	2023-09-05 22:11:15.002750670 +0200
@@ -35,6 +35,7 @@ PRIVATE
     base/platform/linux/base_linux_app_launch_context.h
     base/platform/linux/base_linux_dbus_utilities.cpp
     base/platform/linux/base_linux_dbus_utilities.h
+    base/platform/linux/base_linux_glibmm_helper.h
     base/platform/linux/base_linux_library.cpp
     base/platform/linux/base_linux_library.h
     base/platform/linux/base_linux_wayland_integration.cpp
diff -up tdesktop-4.9.5-full/Telegram/lib_base/base/platform/linux/base_file_utilities_linux.cpp.4~ tdesktop-4.9.5-full/Telegram/lib_base/base/platform/linux/base_file_utilities_linux.cpp
--- tdesktop-4.9.5-full/Telegram/lib_base/base/platform/linux/base_file_utilities_linux.cpp.4~	2023-08-31 20:40:42.000000000 +0200
+++ tdesktop-4.9.5-full/Telegram/lib_base/base/platform/linux/base_file_utilities_linux.cpp	2023-09-05 22:11:15.002750670 +0200
@@ -7,7 +7,6 @@
 #include "base/platform/linux/base_file_utilities_linux.h"
 
 #include "base/platform/base_platform_file_utilities.h"
-#include "base/platform/linux/base_linux_xdp_utilities.h"
 #include "base/platform/linux/base_linux_app_launch_context.h"
 #include "base/platform/linux/base_linux_wayland_integration.h"
 #include "base/algorithm.h"
@@ -55,22 +54,25 @@ bool PortalShowInFolder(const QString &f
 		auto outFdList = Glib::RefPtr<Gio::UnixFDList>();
 
 		connection->call_sync(
-			XDP::kObjectPath,
+			"/org/freedesktop/portal/desktop",
 			"org.freedesktop.portal.OpenURI",
 			"OpenDirectory",
-			Glib::create_variant(std::tuple{
-				XDP::ParentWindowID(),
-				Glib::DBusHandle(),
-				std::map<Glib::ustring, Glib::VariantBase>{
+			Glib::VariantContainerBase::create_tuple({
+				Glib::Variant<Glib::ustring>::create({}),
+				Glib::Variant<int>::create_handle(0),
+				Glib::Variant<std::map<
+					Glib::ustring,
+					Glib::VariantBase
+				>>::create({
 					{
 						"activation_token",
-						Glib::create_variant(activationToken)
+						Glib::Variant<Glib::ustring>::create(activationToken)
 					},
-				},
+				}),
 			}),
 			Gio::UnixFDList::create(std::vector<int>{ fd }),
 			outFdList,
-			XDP::kService);
+			"org.freedesktop.portal.Desktop");
 
 		return true;
 	} catch (...) {
@@ -95,11 +97,11 @@ bool DBusShowInFolder(const QString &fil
 			"/org/freedesktop/FileManager1",
 			"org.freedesktop.FileManager1",
 			"ShowItems",
-			Glib::create_variant(std::tuple{
-				std::vector<Glib::ustring>{
+			Glib::VariantContainerBase::create_tuple({
+				Glib::Variant<std::vector<Glib::ustring>>::create({
 					Glib::filename_to_uri(filepath.toStdString())
-				},
-				startupId,
+				}),
+				Glib::Variant<Glib::ustring>::create(startupId),
 			}),
 			"org.freedesktop.FileManager1");
 
diff -up tdesktop-4.9.5-full/Telegram/lib_base/base/platform/linux/base_last_input_linux.cpp.4~ tdesktop-4.9.5-full/Telegram/lib_base/base/platform/linux/base_last_input_linux.cpp
--- tdesktop-4.9.5-full/Telegram/lib_base/base/platform/linux/base_last_input_linux.cpp.4~	2023-08-31 20:40:42.000000000 +0200
+++ tdesktop-4.9.5-full/Telegram/lib_base/base/platform/linux/base_last_input_linux.cpp	2023-09-05 22:11:15.003750680 +0200
@@ -7,6 +7,7 @@
 #include "base/platform/linux/base_last_input_linux.h"
 
 #include "base/platform/base_platform_info.h"
+#include "base/platform/linux/base_linux_glibmm_helper.h"
 #include "base/debug_log.h"
 
 #ifndef DESKTOP_APP_DISABLE_X11_INTEGRATION
@@ -77,14 +78,14 @@ std::optional<crl::time> FreedesktopDBus
 			return std::nullopt;
 		}
 
-		const auto value = connection->call_sync(
+		auto reply = connection->call_sync(
 			"/org/freedesktop/ScreenSaver",
 			"org.freedesktop.ScreenSaver",
 			"GetSessionIdleTime",
 			{},
-			"org.freedesktop.ScreenSaver"
-		).get_child(0).get_dynamic<uint>();
+			"org.freedesktop.ScreenSaver");
 
+		const auto value = GlibVariantCast<uint>(reply.get_child(0));
 		return (crl::now() - static_cast<crl::time>(value));
 	} catch (const Glib::Error &e) {
 		static const auto NotSupportedErrors = {
@@ -140,14 +141,14 @@ std::optional<crl::time> MutterDBusLastU
 			return std::nullopt;
 		}
 
-		const auto value = connection->call_sync(
+		auto reply = connection->call_sync(
 			"/org/gnome/Mutter/IdleMonitor/Core",
 			"org.gnome.Mutter.IdleMonitor",
 			"GetIdletime",
 			{},
-			"org.gnome.Mutter.IdleMonitor"
-		).get_child(0).get_dynamic<uint64>();
+			"org.gnome.Mutter.IdleMonitor");
 
+		const auto value = GlibVariantCast<uint64>(reply.get_child(0));
 		return (crl::now() - static_cast<crl::time>(value));
 	} catch (const Glib::Error &e) {
 		static const auto NotSupportedErrors = {
diff -up tdesktop-4.9.5-full/Telegram/lib_base/base/platform/linux/base_linux_dbus_utilities.cpp.4~ tdesktop-4.9.5-full/Telegram/lib_base/base/platform/linux/base_linux_dbus_utilities.cpp
--- tdesktop-4.9.5-full/Telegram/lib_base/base/platform/linux/base_linux_dbus_utilities.cpp.4~	2023-08-31 20:40:42.000000000 +0200
+++ tdesktop-4.9.5-full/Telegram/lib_base/base/platform/linux/base_linux_dbus_utilities.cpp	2023-09-05 22:11:15.003750680 +0200
@@ -6,43 +6,47 @@
 //
 #include "base/platform/linux/base_linux_dbus_utilities.h"
 
+#include "base/platform/linux/base_linux_glibmm_helper.h"
+
+
 namespace base::Platform::DBus {
 
 bool NameHasOwner(
 		const Glib::RefPtr<Gio::DBus::Connection> &connection,
 		const Glib::ustring &name) {
-	return connection->call_sync(
+	auto reply = connection->call_sync(
 		kObjectPath,
 		kInterface,
 		"NameHasOwner",
-		Glib::create_variant(std::tuple{name}),
-		kService
-	).get_child(0).get_dynamic<bool>();
+		MakeGlibVariant(std::tuple{name}),
+		std::string(kDBusService));
+	return GlibVariantCast<bool>(reply.get_child(0));
 }
 
 std::vector<Glib::ustring> ListActivatableNames(
 		const Glib::RefPtr<Gio::DBus::Connection> &connection) {
-	return connection->call_sync(
+	auto reply = connection->call_sync(
 		kObjectPath,
 		kInterface,
 		"ListActivatableNames",
 		{},
-		kService
-	).get_child(0).get_dynamic<std::vector<Glib::ustring>>();
+		std::string(kDBusService));
+
+	return GlibVariantCast<std::vector<Glib::ustring>>(
+		reply.get_child(0));
 }
 
 StartReply StartServiceByName(
 		const Glib::RefPtr<Gio::DBus::Connection> &connection,
 		const Glib::ustring &name) {
-	return StartReply(
-		connection->call_sync(
-			kObjectPath,
-			kInterface,
-			"StartServiceByName",
-			Glib::create_variant(std::tuple{ name, uint(0) }),
-			kService
-		).get_child(0).get_dynamic<uint>()
-	);
+	auto reply = connection->call_sync(
+		std::string(kDBusObjectPath),
+		std::string(kDBusInterface),
+		"StartServiceByName",
+		MakeGlibVariant(std::tuple{ name, uint(0) }),
+		std::string(kDBusService));
+
+	return StartReply(GlibVariantCast<uint>(reply.get_child(0)));
 }
 
 void StartServiceByNameAsync(
@@ -53,16 +57,11 @@ void StartServiceByNameAsync(
 		kObjectPath,
 		kInterface,
 		"StartServiceByName",
-		Glib::create_variant(std::tuple{ name, uint(0) }),
+		MakeGlibVariant(std::tuple{ name, uint(0) }),
 		[=](const Glib::RefPtr<Gio::AsyncResult> &result) {
 			callback([=] {
-				return StartReply(
-					connection->call_finish(
-						result
-					).get_child(
-						0
-					).get_dynamic<uint>()
-				);
+				auto reply = connection->call_finish(result);
+				return StartReply(GlibVariantCast<uint>(reply.get_child(0)));
 			});
 		},
 		kService);
@@ -82,19 +81,16 @@ uint RegisterServiceWatcher(
 			const Glib::ustring &object_path,
 			const Glib::ustring &interface_name,
 			const Glib::ustring &signal_name,
-			const Glib::VariantContainerBase &parameters) {
+			Glib::VariantContainerBase parameters) {
 			try {
-				const auto name = parameters.get_child(
-					0
-				).get_dynamic<Glib::ustring>();
-
-				const auto oldOwner =  parameters.get_child(
-					1
-				).get_dynamic<Glib::ustring>();
-
-				const auto newOwner =  parameters.get_child(
-					2
-				).get_dynamic<Glib::ustring>();
+				const auto name = GlibVariantCast<Glib::ustring>(
+					parameters.get_child(0));
+
+				const auto oldOwner = GlibVariantCast<Glib::ustring>(
+					parameters.get_child(1));
+
+				const auto newOwner = GlibVariantCast<Glib::ustring>(
+					parameters.get_child(2));
 
 				if (name != service) {
 					return;
diff -up tdesktop-4.9.5-full/Telegram/lib_base/base/platform/linux/base_linux_dbus_utilities.h.4~ tdesktop-4.9.5-full/Telegram/lib_base/base/platform/linux/base_linux_dbus_utilities.h
--- tdesktop-4.9.5-full/Telegram/lib_base/base/platform/linux/base_linux_dbus_utilities.h.4~	2023-08-31 20:40:42.000000000 +0200
+++ tdesktop-4.9.5-full/Telegram/lib_base/base/platform/linux/base_linux_dbus_utilities.h	2023-09-05 22:11:15.003750680 +0200
@@ -7,6 +7,7 @@
 #pragma once
 
 #include "base/basic_types.h"
+#include "base/const_string.h"
 
 #include <glibmm.h>
 #include <giomm.h>
@@ -17,6 +18,10 @@ inline constexpr auto kService = "org.fr
 inline constexpr auto kObjectPath = "/org/freedesktop/DBus";
 inline constexpr auto kInterface = kService;
 
+inline constexpr auto kDBusService = "org.freedesktop.DBus"_cs;
+inline constexpr auto kDBusObjectPath = "/org/freedesktop/DBus"_cs;
+inline constexpr auto kDBusInterface = kDBusService;
+
 enum class StartReply {
 	Success,
 	AlreadyRunning,
diff -up tdesktop-4.9.5-full/Telegram/lib_base/base/platform/linux/base_linux_glibmm_helper.h.4~ tdesktop-4.9.5-full/Telegram/lib_base/base/platform/linux/base_linux_glibmm_helper.h
--- tdesktop-4.9.5-full/Telegram/lib_base/base/platform/linux/base_linux_glibmm_helper.h.4~	2023-09-05 22:11:15.003750680 +0200
+++ tdesktop-4.9.5-full/Telegram/lib_base/base/platform/linux/base_linux_glibmm_helper.h	2023-09-05 22:11:15.003750680 +0200
@@ -0,0 +1,130 @@
+// This file is part of Desktop App Toolkit,
+// a set of libraries for developing nice desktop applications.
+//
+// For license and copyright information please follow this link:
+// https://github.com/desktop-app/legal/blob/master/LEGAL
+//
+#pragma once
+
+#include "base/basic_types.h"
+
+#include <glibmm/variant.h>
+
+namespace Glib {
+
+struct Int64Helper0 {};
+using Int64Helper = std::conditional_t<std::is_same_v<gint64, int64>, Int64Helper0, int64>;
+
+struct UInt64Helper0 {};
+using UInt64Helper = std::conditional_t<std::is_same_v<guint64, uint64>, UInt64Helper0, uint64>;
+
+template <>
+class Variant<Int64Helper> : public VariantBase {
+public:
+	using CType = gint64;
+
+	/// Default constructor.
+	Variant() : VariantBase() {
+	}
+
+	/** GVariant constructor.
+	* @param castitem The GVariant to wrap.
+	* @param take_a_reference Whether to take an extra reference of the
+	* GVariant or not (not taking one could destroy the GVariant with the
+	* wrapper).
+	*/
+	explicit Variant(GVariant *castitem, bool take_a_reference = false)
+	: VariantBase(castitem, take_a_reference) {
+	}
+
+	/** Gets the Glib::VariantType.
+	* @return The Glib::VariantType.
+	*/
+	static const VariantType &variant_type() G_GNUC_CONST {
+		static VariantType type(G_VARIANT_TYPE_INT64);
+		return type;
+	}
+
+	/** Creates a new Glib::Variant<int64>.
+	* @param data The value of the new Glib::Variant<int64>.
+	* @return The new Glib::Variant<int64>.
+	*/
+	static Variant<int64> create(int64 data) {
+		auto result = Variant<int64>(g_variant_new_int64(data));
+		return result;
+	}
+
+	/** Gets the value of the Glib::Variant<int64>.
+	* @return The int64 value of the Glib::Variant<int64>.
+	*/
+	int64 get() const {
+		return g_variant_get_int64(gobject_);
+	}
+};
+
+template <>
+class Variant<UInt64Helper> : public VariantBase {
+public:
+	using CType = guint64;
+
+	/// Default constructor.
+	Variant() : VariantBase() {
+	}
+
+	/** GVariant constructor.
+	* @param castitem The GVariant to wrap.
+	* @param take_a_reference Whether to take an extra reference of the
+	* GVariant or not (not taking one could destroy the GVariant with the
+	* wrapper).
+	*/
+	explicit Variant(GVariant *castitem, bool take_a_reference = false)
+	: VariantBase(castitem, take_a_reference) {
+	}
+
+	/** Gets the Glib::VariantType.
+	* @return The Glib::VariantType.
+	*/
+	static const VariantType &variant_type() G_GNUC_CONST {
+		static VariantType type(G_VARIANT_TYPE_UINT64);
+		return type;
+	}
+
+	/** Creates a new Glib::Variant<uint64>.
+	* @param data The value of the new Glib::Variant<uint64>.
+	* @return The new Glib::Variant<uint64>.
+	*/
+	static Variant<uint64> create(uint64 data) {
+		auto result = Variant<uint64>(g_variant_new_uint64(data));
+		return result;
+	}
+
+	/** Gets the value of the Glib::Variant<uint64>.
+	* @return The uint64 value of the Glib::Variant<uint64>.
+	*/
+	uint64 get() const {
+		return g_variant_get_uint64(gobject_);
+	}
+};
+
+} // namespace Glib
+
+namespace base {
+namespace Platform {
+
+template <typename T>
+auto MakeGlibVariant(T &&data) {
+	return Glib::Variant<std::decay_t<T>>::create(data);
+}
+
+template <typename T>
+auto MakeGlibVariant(const T &data) {
+	return Glib::Variant<T>::create(data);
+}
+
+template <typename T>
+auto GlibVariantCast(const Glib::VariantBase &data) {
+	return Glib::VariantBase::cast_dynamic<Glib::Variant<T>>(data).get();
+}
+
+} // namespace Platform
+} // namespace base
diff -up tdesktop-4.9.5-full/Telegram/lib_base/base/platform/linux/base_linux_xdp_utilities.cpp.4~ tdesktop-4.9.5-full/Telegram/lib_base/base/platform/linux/base_linux_xdp_utilities.cpp
--- tdesktop-4.9.5-full/Telegram/lib_base/base/platform/linux/base_linux_xdp_utilities.cpp.4~	2023-08-31 20:40:42.000000000 +0200
+++ tdesktop-4.9.5-full/Telegram/lib_base/base/platform/linux/base_linux_xdp_utilities.cpp	2023-09-05 22:11:15.003750680 +0200
@@ -6,6 +6,7 @@
 //
 #include "base/platform/linux/base_linux_xdp_utilities.h"
 
+#include "base/platform/linux/base_linux_glibmm_helper.h"
 #include "base/platform/linux/base_linux_wayland_integration.h"
 #include "base/platform/base_platform_info.h"
 
@@ -43,21 +44,21 @@ std::optional<Glib::VariantBase> ReadSet
 		const Glib::ustring &group,
 		const Glib::ustring &key) {
 	try {
-		return Gio::DBus::Connection::get_sync(
-			Gio::DBus::BusType::SESSION
-		)->call_sync(
+		const auto connection = Gio::DBus::Connection::get_sync(
+			Gio::DBus::BusType::SESSION);
+
+		auto reply = connection->call_sync(
 			std::string(kObjectPath),
 			std::string(kSettingsInterface),
 			"Read",
-			Glib::create_variant(std::tuple{
+			MakeGlibVariant(std::tuple{
 				group,
 				key,
 			}),
-			std::string(kService)
-		).get_child(
-			0
-		).get_dynamic<Glib::Variant<Glib::VariantBase>>(
-		).get();
+			std::string(kService));
+
+		return GlibVariantCast<Glib::VariantBase>(
+			GlibVariantCast<Glib::VariantBase>(reply.get_child(0)));
 	} catch (...) {
 	}
 
@@ -90,19 +91,16 @@ SettingWatcher::SettingWatcher(
 				const Glib::ustring &object_path,
 				const Glib::ustring &interface_name,
 				const Glib::ustring &signal_name,
-				const Glib::VariantContainerBase &parameters) {
+				Glib::VariantContainerBase parameters) {
 				try {
-					const auto group = parameters.get_child(
-						0
-					).get_dynamic<Glib::ustring>();
-
-					const auto key = parameters.get_child(
-						1
-					).get_dynamic<Glib::ustring>();
-
-					const auto value = parameters.get_child(
-						2
-					).get_dynamic<Glib::VariantBase>();
+					const auto group = GlibVariantCast<Glib::ustring>(
+						parameters.get_child(0));
+
+					const auto key = GlibVariantCast<Glib::ustring>(
+						parameters.get_child(1));
+
+					const auto value = GlibVariantCast<Glib::VariantBase>(
+						parameters.get_child(2));
 
 					callback(group, key, value);
 				} catch (...) {
diff -up tdesktop-4.9.5-full/Telegram/lib_base/base/platform/linux/base_power_save_blocker_linux.cpp.4~ tdesktop-4.9.5-full/Telegram/lib_base/base/platform/linux/base_power_save_blocker_linux.cpp
--- tdesktop-4.9.5-full/Telegram/lib_base/base/platform/linux/base_power_save_blocker_linux.cpp.4~	2023-08-31 20:40:42.000000000 +0200
+++ tdesktop-4.9.5-full/Telegram/lib_base/base/platform/linux/base_power_save_blocker_linux.cpp	2023-09-05 22:11:15.003750680 +0200
@@ -89,20 +89,24 @@ void PortalPreventAppSuspension(
 			XDP::kObjectPath,
 			"org.freedesktop.portal.Inhibit",
 			"Inhibit",
-			Glib::create_variant(std::tuple{
-				XDP::ParentWindowID(window),
-				uint(4), // Suspend
-				std::map<Glib::ustring, Glib::VariantBase>{
+			Glib::VariantContainerBase::create_tuple({
+				Glib::Variant<Glib::ustring>::create(
+					XDP::ParentWindowID(window)),
+				Glib::Variant<uint>::create(4), // Suspend
+				Glib::Variant<std::map<
+					Glib::ustring,
+					Glib::VariantBase
+				>>::create({
 					{
 						"handle_token",
-						Glib::create_variant(handleToken)
+						Glib::Variant<Glib::ustring>::create(handleToken)
 					},
 					{
 						"reason",
-						Glib::create_variant(
-							Glib::ustring(description.toStdString()))
+						Glib::Variant<Glib::ustring>::create(
+							description.toStdString())
 					},
-				},
+				}),
 			}),
 			{},
 			XDP::kService);
diff -up tdesktop-4.9.5-full/Telegram/lib_base/base/platform/linux/base_url_scheme_linux.cpp.4~ tdesktop-4.9.5-full/Telegram/lib_base/base/platform/linux/base_url_scheme_linux.cpp
--- tdesktop-4.9.5-full/Telegram/lib_base/base/platform/linux/base_url_scheme_linux.cpp.4~	2023-08-31 20:40:42.000000000 +0200
+++ tdesktop-4.9.5-full/Telegram/lib_base/base/platform/linux/base_url_scheme_linux.cpp	2023-09-05 22:11:15.003750680 +0200
@@ -8,6 +8,8 @@
 
 #include "base/debug_log.h"
 
+#include "base/platform/linux/base_linux_glibmm_helper.h"
+
 #include <QtGui/QGuiApplication>
 #include <QtWidgets/QWidget>
 
@@ -29,16 +31,18 @@ void SnapDefaultHandler(const QString &p
 		const auto connection = Gio::DBus::Connection::get_sync(
 			Gio::DBus::BusType::SESSION);
 
-		const auto currentHandler = connection->call_sync(
+		auto reply = connection->call_sync(
 			kSnapcraftSettingsObjectPath,
 			kSnapcraftSettingsInterface,
 			"GetSub",
-			Glib::create_variant(std::tuple{
+			MakeGlibVariant(std::tuple{
 				Glib::ustring("default-url-scheme-handler"),
 				Glib::ustring(protocol.toStdString()),
 			}),
-			kSnapcraftSettingsService
-		).get_child(0).get_dynamic<Glib::ustring>();
+			std::string(kSnapcraftSettingsService));
+
+		const auto currentHandler = GlibVariantCast<Glib::ustring>(
+			reply.get_child(0));
 
 		const auto expectedHandler = qEnvironmentVariable("SNAP_NAME")
 			+ ".desktop";
@@ -56,7 +60,7 @@ void SnapDefaultHandler(const QString &p
 			kSnapcraftSettingsObjectPath,
 			kSnapcraftSettingsInterface,
 			"SetSub",
-			Glib::create_variant(std::tuple{
+			MakeGlibVariant(std::tuple{
 				Glib::ustring("default-url-scheme-handler"),
 				Glib::ustring(protocol.toStdString()),
 				Glib::ustring(expectedHandler.toStdString()),
diff -up tdesktop-4.9.5-full/Telegram/lib_ui/ui/platform/linux/ui_window_title_linux.cpp.4~ tdesktop-4.9.5-full/Telegram/lib_ui/ui/platform/linux/ui_window_title_linux.cpp
--- tdesktop-4.9.5-full/Telegram/lib_ui/ui/platform/linux/ui_window_title_linux.cpp.4~	2023-09-04 10:05:12.000000000 +0200
+++ tdesktop-4.9.5-full/Telegram/lib_ui/ui/platform/linux/ui_window_title_linux.cpp	2023-09-05 22:11:15.003750680 +0200
@@ -6,14 +6,13 @@
 //
 #include "ui/platform/linux/ui_window_title_linux.h"
 
+#include "base/platform/linux/base_linux_glibmm_helper.h"
 #include "base/platform/linux/base_linux_xdp_utilities.h"
 
 #ifndef DESKTOP_APP_DISABLE_X11_INTEGRATION
 #include "base/platform/linux/base_linux_xsettings.h"
 #endif // !DESKTOP_APP_DISABLE_X11_INTEGRATION
 
-#include <glibmm.h>
-
 namespace Ui {
 namespace Platform {
 namespace internal {
@@ -121,7 +120,7 @@ TitleControls::Layout TitleControlsLayou
 
 			return GtkKeywordsToTitleControlsLayout(
 				QString::fromStdString(
-					decorationLayout->get_dynamic<Glib::ustring>()));
+					base::Platform::GlibVariantCast<Glib::ustring>(*decorationLayout)));
 		} catch (...) {
 		}
 
diff -up tdesktop-4.9.5-full/cmake/external/glibmm/CMakeLists.txt.4~ tdesktop-4.9.5-full/cmake/external/glibmm/CMakeLists.txt
--- tdesktop-4.9.5-full/cmake/external/glibmm/CMakeLists.txt.4~	2023-09-04 14:19:11.000000000 +0200
+++ tdesktop-4.9.5-full/cmake/external/glibmm/CMakeLists.txt	2023-09-05 22:11:15.003750680 +0200
@@ -8,8 +8,8 @@ add_library(external_glibmm INTERFACE IM
 add_library(desktop-app::external_glibmm ALIAS external_glibmm)
 
 find_package(PkgConfig REQUIRED)
-pkg_check_modules(GLIBMM REQUIRED IMPORTED_TARGET glibmm-2.68>=2.77)
-pkg_check_modules(GIOMM REQUIRED IMPORTED_TARGET giomm-2.68>=2.77)
+pkg_check_modules(GLIBMM REQUIRED IMPORTED_TARGET glibmm-2.68>=2.76)
+pkg_check_modules(GIOMM REQUIRED IMPORTED_TARGET giomm-2.68>=2.76)
 
 if (DESKTOP_APP_USE_PACKAGED)
     target_link_libraries(external_glibmm
diff -up tdesktop-4.9.5-full/snap/snapcraft.yaml.4~ tdesktop-4.9.5-full/snap/snapcraft.yaml
--- tdesktop-4.9.5-full/snap/snapcraft.yaml.4~	2023-09-05 11:10:03.000000000 +0200
+++ tdesktop-4.9.5-full/snap/snapcraft.yaml	2023-09-05 22:11:15.003750680 +0200
@@ -247,7 +247,7 @@ parts:
   glibmm:
     source: https://github.com/GNOME/glibmm.git
     source-depth: 1
-    source-tag: 2.77.0
+    source-tag: 2.76.0
     plugin: meson
     build-packages:
       - meson
