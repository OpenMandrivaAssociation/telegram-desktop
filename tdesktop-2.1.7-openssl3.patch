diff --git a/Telegram/SourceFiles/core/utils.cpp b/Telegram/SourceFiles/core/utils.cpp
index 3a924059..53b21c63 100644
--- a/Telegram/SourceFiles/core/utils.cpp
+++ b/Telegram/SourceFiles/core/utils.cpp
@@ -175,7 +175,7 @@ namespace ThirdParty {
 
 	void finish() {
 		CRYPTO_cleanup_all_ex_data();
-#ifndef LIBRESSL_VERSION_NUMBER
+#if !defined(LIBRESSL_VERSION_NUMBER) && OPENSSL_VERSION_MAJOR < 3
 		FIPS_mode_set(0);
 #endif
 		ENGINE_cleanup();
diff -up tdesktop-2.7.9-full/Telegram/lib_base/base/openssl_help.h.omv~ tdesktop-2.7.9-full/Telegram/lib_base/base/openssl_help.h
--- tdesktop-2.7.9-full/Telegram/lib_base/base/openssl_help.h.omv~	2021-06-21 17:55:46.854877200 +0200
+++ tdesktop-2.7.9-full/Telegram/lib_base/base/openssl_help.h	2021-06-21 18:12:03.420101458 +0200
@@ -28,6 +28,12 @@ extern "C" {
 #undef small
 #endif // small
 
+#if OPENSSL_VERSION_MAJOR >= 3
+#define SHA1 "SHA1"
+#define SHA256 "SHA256"
+#define SHA512 "SHA512"
+#endif
+
 namespace openssl {
 
 class Context {
@@ -414,6 +420,7 @@ inline void ShaUpdate(Context context, M
 	ShaUpdate(context, method, args...);
 }
 
+#if OPENSSL_VERSION_MAJOR < 3
 template <size_type Size, typename Method>
 inline void Sha(
 		bytes::span dst,
@@ -426,6 +433,21 @@ inline void Sha(
 		data.size(),
 		reinterpret_cast<unsigned char*>(dst.data()));
 }
+#else
+template <size_type Size>
+inline void Sha(
+		bytes::span dst,
+		char const * const method,
+		bytes::const_span data) {
+	Expects(dst.size() >= Size);
+
+	EVP_Q_digest(NULL, method, NULL,
+		reinterpret_cast<const unsigned char*>(data.data()),
+		data.size(),
+		reinterpret_cast<unsigned char*>(dst.data()),
+		NULL);
+}
+#endif
 
 template <size_type Size, typename Method>
 [[nodiscard]] inline bytes::vector Sha(

